// 🟦 배열 메소드 정리 


// 🔷 [레퍼런스 데이터 사용시 주의점]

    // 1. 레퍼런스 타입은 '주소' 를 비교한다. 
    
        // 1.1 다른 변수에 넣는다고 해서, '주소가 달라지지 않음' 
            let a = [1,2,3];
            let b = a;
            console.log(`비교 결과 : ${a == b}`)
                // [결과]   비교 결과 : true

        // 1.2 값이 같아도, 다른 변수면, 다른 곳에 저장되므로, 주소가 다르고, 따라서 다른 배열임!
            let c = [1,2,3]
            let d = [1,2,3]
            console.log(`비교 결과 : ${c == d}`)
                // [결과]   비교 결과 : false
                // [해석]
                    // 값은 동일해도, '다른 변수' = '다른 장소' 에 저장! -> so, 달라!



// 🔷 [배열 만들기, 생성, Create]

    // 1. Array.of 
    
        // [기능 및 특징]
            // '전달된 인자' 를 '요소' 로 하는 '배열' 을 만들어준다. 
            // '배열을 생성' 할 때, 사용하는 메소드 
            // 생성자에 of 를 붙인다.
    
            const arr = Array.of(1,2,3,4,5,6);
            console.log(arr)
                // [결과] [1, 2, 3, 4, 5, 6]

                
// 🔷 [수정, Edit, Update]

    // 1. '원본 배열' 을 수정하는 방식
    
        // 1.1 push 메소드 
            // [기능]
                // 결과값으로 새로운 배열을 반환하는게 아니라, '원본 배열을 수정' 하는 메소드. 

            // [예시]
                arr.push('push로 원본에 추가한 값!👐')
                    // 2 라는 값이 arr 배열에 들어간다. 
                console.log(arr)
                    // [결과] [1, 2, 3, 4, 5, 6, 'push로 원본에 추가한 값!👐']

        // [주의할 점]
            // 1. '특정 배열을 복사해서 새로운 값' 을 넣고 싶을 때, '참조 타입 = 주소 비교' 임을 주의 
            
                // 1.1 오류 나기 쉬운 방식 
                    let e = [1,2,3]
                    let f = e;      
                        // [해석] 
                            // 이 순간은, '주소' 를 복사하는 것 임
                            // so, e 와 f 의 '주소는 동일'
                    f.push(2)
                    console.log(` e == f 결과 : ${e == f}`)
                        // [결과] e == f 결과 : true
                        // [시사점]
                            // 다른 배열에 값을 추가했다고 오해 할 수 있음.
                        
                // 1.2 진짜 다른 배열에 값을 추가 하려면? ⭐⭐⭐⭐⭐⭐ 
                    let g = [1,2,3]
                    let h = [...g]
                        // ⭐⭐⭐ 스프레드연산자! 를 활용 ⭐⭐⭐
                        // 이 순간 1) 값을 복사 -> 새로운 배열을 만들고 -> h 에 저장 
                        // g 와 h 는 주소가 다름 -> 다른 배열임! 
                    h.push(2)
                    console.log(`g vs h : ${g == h}`)
                        // [결과]   g vs h : false

    
    // 2. '원본 배열 유지', '새로운 배열' 을 수정하는 경우

        // 2.1 concat 메소드 
            // [기능]
                // 원본배열을 수정하지 않음. 
                // '새로운 배열' 을 만들고, 값을 추가하고, 반환하는 메소드. 
            
            // [예문]
                const result = arr.concat('이건, concat 으로 원본을 유지하고, 값을 추가')
                console.log(`애초의 배열 : ${arr}`)
                    // [결과] 애초의 배열 : 1,2,3,4,5,6,push로 원본에 추가한 값!👐
                console.log(`concat 한 결과 : ${result}`)
                    // [결과] concat 한 결과 : 1,2,3,4,5,6,push로 원본에 추가한 값!👐,이건, concat 으로 원본을 유지하고, 값을 추가
    
            // [주의할 것]
                // 1. '원본 배열'과 '새로운 배열' 은 '다른 주소' 에 생긴 것 임.
                    console.log(arr == result)
                        // [결과]   false 
                        // [생각해볼 지점]
                            // '배열' 은 '레퍼런스 타입' 이므로, '값이 동일' 하다고 해서, 비교시 true 가 나오지 않음. 
                            // 위의 비교는 false 를 반환했으므로, concat 의 결과는 '다른 주소'에 저장되었다고 봐야함. 


    // 3. 정해진 사이즈가 없는 js 의 특징을 이용하는 경우 
        // js 는 다른 언어와 달리, index 사이즈를 정해주지 않음. so, index 에러가 뜰 일이 없음. 

        const arr3l = [1,2,3]

        // 3.1 딱 맞춰서, 끝자리에 넣는 경우
            arr3l[arr3l.length] = 10;
                // 3번째 자리에 '10' 이라는 값을 넣어라
                console.log(arr3l)
                // [결과]   (4) [1, 2, 3, 10]

        // 3.2 empty 하나 넣고, 그 다음 자리에 넣는 경우
            arr3l[arr3l.length + 1] = 'a';
            console.log(arr3l)
                // [결과]   (6) [1, 2, 3, 10, empty, 'a']
                // [해석] 
                    // +1 을 해서, 그 사이값이 현재, 📌'비어있음'📌 
                    // 다만, 이런 방식은 지양👐



    // 4. 배열 2개를, 하나로 합쳐줌.(배열 이어붙이게 하고 싶은 경우)
        const arr1i = [1,2];
        const arr2i = [3,4];
        const arr3i = arr1i.concat(arr2i)
        console.log(`배열 이어 붙이기 : ${arr3i}`)
            // [결과]   배열 이어 붙이기 : 1,2,3,4

        // [활용처] ⭐⭐⭐⭐⭐⭐⭐⭐ 
            // 1. 전체 상품 리스트 중 '이벤트성' 또는 '전체 상품 페이지' 를 구성해야 할 때.
            // 2. 원본은 유지하고, 새로운 리스트를 만들어야 할 때 ⭐⭐ 

    
    // 5. 원하는 부분을 제거 또는 수정 하는 경우 : splice 메소드 ⭐⭐⭐
        // [특징]
            // update 와 delete 기능이 모두 들어있음. 

        // [update 기능]
            const arr61 = [1,2,3,4,5,6];
            const result61 = arr61.splice(1,3,20,30,40);
                // [해석]
                    // 첫 번째 매개변수 : 수정이 ⭐시작되는 인덱스⭐ (이 인덱스부터 수정 시작) 
                    // 두 번째 매개변수 : 수정이 ⭐끝났으면 하는 인덱스⭐ (이 인덱스까지 수정 완료) 
                    // 세 번째 매개변수 : 수정할 값 (위에서 정한만큼, 수정할 값을 넣어줘야 함)
                    // 네 번째 매개변수 : 수정할 값 
                    // 다섯 번째 매개변수 : 수정할 값 
                // [참고]
                    // 만약, 인덱스 설정으로, 3개의 값을 수정하기로 했는데, 2개 밖에 입력을 안 하면, 
                    // 남은 곳에는 default 로, 기존에 있던 값이 들어감. 
            console.log(`splice하고, 원본에 더한 결과 : ${arr61}`)
                // [결과]
                    // splice하고 원본에 더한 결과: 1,20,30,40,5,6
            console.log(`splice 하고, 빼낸 값 : ${result61}`)
                // [결과]
                    // splice 하고, 빼낸 값(휴지통에 버려질 값) : 2,3,4


    // 6. slice 메소드 : 배열을 '매개변수로 전달받은 범위' 만큼 잘라서, 1) 원본 배열은 건들지 않고 2) 새로운 배열을 반환 
        // [특징]
            // 원본 배열은 바뀌지 않음.

        // [예문]
            const arr9 = [1,2,3,4,5];
            console.log(`slice 예시 : ${arr9.slice(0,2)}`)
                // [결과]   slice 예시 : 1,2
                // [해석]
                    // 저 만큼을 잘라서, 새로운 배열을 만들어준다.


    // 7. reverse : 배열의 순서를 뒤집기
        // 배열 뒤집기 ⭐⭐ 
        // 배열을 뒤집어주는 메소드 
            const arr13 = [1,2,3,4,5,6,7]
            console.log(arr13.reverse())    
                // [결과]   (7) [7, 6, 5, 4, 3, 2, 1]


    // 8. fill : 인자로 전달받은 값을, 배열의 처음부터~끝 까지, 채워준다.
        const arr11 = [1,2,3,4,5];
        arr11.fill(1)
        console.log(`기본값 채우기 : ${arr11}`)
            // [결과]   기본값 채우기 : 1,1,1,1,1


    // 9. flat() 메소드 : 중첩된 배열을 1차 배열로 변환
        // [기능]
            // 2차 배열을 -> 1차 배열로 
            // 한 뎁스씩 맞춰준다. 

        // [특징]
            // ES10 출신

        // [예문]
            // 매개변수 없는 경우
            const arr123 = [1,2,3,[4,5,6],7,8,9].flat()
            console.log(`flat : ${arr123}`)
                // [결과]   flat : 1,2,3,4,5,6,7,8,9

            // 특정 차원만큼, 펴달라는 경우
            const133 = [1,2,[3,[4,5],6]].flat(2)
            console.log(`flat : ${arr123}`)
                // [결과]   flat : 1,2,3,4,5,6,7,8,9
                // [해석]  
                    // 매개변수 2의 의미 : '2'개의 차원을 1개로 줄여달라

            // 끝까지, 알아서, 펴달라는 경우
            const155 = [[[[[[[[[[[[[[123,123,123]]]]]]]]]]]]]]
            console.log(`flat : ${const155}`)
                // [결과]   flat : 123,123,123




// 🔷 [값 읽어오기, 원하는 값 가져오기, Read]

        
        // 1. indexOf 메소드
            // [결과물]
                // 1) 해당 요소가 있는지 여부 
                // 2) 없으면 -> '-1' 반환 
                // 3) 있으면 -> 해당 index 숫자를 반환 
                
            // [기능]
                // 원본 배열에서 1) 해당 요소가 있는지 여부를 판단 2) 있으면 -> index 를 반환 3) 없으면 -1 반환
            
            // [시사점]
                // ⭐⭐ 2가지 정보를 준다. ⭐⭐ 1) 해당 요소가 있는지 여부 2) 있으면 index 까지 

            // [예문]
                const foods = ['apple', 'banana', 'orange'];
                if(foods.indexOf('banana') === -1 ) {
                    foods.push('bananas')
                }
                console.log(foods)
                    // [결과] (3) ['apple', 'banana', 'orange']


        // 2. includes 
            // [결과물]
                // 1) 해당 요소 있으면 -> true, 
                // 2) 없으면 -> false
            
            // [예문] '해당 배열에 banana가 없으면, 추가해라!'
                const foods2 = ['kiwi', 'rice', 'meat']
                console.log(foods2.includes('bananas'))
                    // [결과]   false
                
                if(!foods2.includes('banana')) {
                    foods2.push('banana')
                }
                console.log(foods2)
                    // [결과]   (4) ['kiwi', 'rice', 'meat', 'banana']

            // [특징]
                // ES7 에 도입 



// 🔷 [값 제거, Delete]

    // 1. '원본이 수정'되는 경우

        // 1.1 pop()
            // [기능]
                // '가장 끝 요소' 를 지움. 

            // [예문]
                const arr5 = [1,2,3,4,5];
                arr5.pop()
                console.log(arr5)
                    // [결과]   (4) [1, 2, 3, 4]

        // 1.2 shift()
            // [기능]
                // '가장 첫 요소' 를 지움. 
                
            // [예문]
                arr5.shift()
                console.log(arr5)
                // [결과]   (3) [2, 3, 4]


        // 1.3 splice 메소드 
            // [기능]
                // 중간값, 내가 원하는 부분, 을 제거, 추가 하는 기능 
                // 원하는 부분을 제거 또는 수정 하는 경우 : splice 메소드 ⭐⭐⭐
                
            // [특징]
                // update 와 delete 기능이 모두 들어있음. 
        
            // [delete 기능]
                const arr7 = [1,2,3,4]
                const result3 = arr7.splice(1,2)
                console.log(`삭제되고, 남은 원본 : ${arr7}`)
                    // [결과] 삭제되고, 남은 원본 : 1,4
                console.log(`삭제된, 휴지통 값 : ${result3}`)
                    // [결과] 삭제된, 휴지통 값 : 2,3

        
        // 1.4 배열에서 특정 요소 제거 함수 만들기 
            
            const arr8 = [1,20,3,11,233333,12,15,18];
            
            function remove(arr, item) {

            const indexOfItem = arr.indexOf(item);

            if (indexOfItem !== -1)
                arr.splice(indexOfItem,1)
                return arr
            }
                // [배운 것]
                    // ⭐⭐ if 조건문 적을 때, if 다음 무조건 실행되어야 하는 경우엔, { } 이걸 안 해도 됨!

            console.log(remove(arr8, 233333))
                // [결과]
                    // (7) [1, 20, 3, 11, 12, 15, 18]



// 🔷 변환 
    //  1. 모든 배열을 '문자열' 로 변환 
        const arr10 = [1,2,3,4];
        const result4 = arr10.join();
        console.log(result4)
            // [결과]   1,2,3,4



